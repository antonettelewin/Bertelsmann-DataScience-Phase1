Lesson 24
Arithmetic Operations
  +   addition
  -   subtraction
  *   multiplcation
  /   division
  **  exponential
  %   modulo (returns remainer)
  //  interger diviaon (sums down answer to whole number 3.5=3)
  
There are two Python data types that could be used for numeric values:
  int - for integer values
  float - for decimal or floating point values
  x = int(4.7)   # x is now an integer 4
  y = float(4)   # y is now a float of 4.0

Type And Type Conversion
  You have seen four data types so far:
    int
    float
    bool
    string
    
String Methods
  Methods are like some of the functions you have already seen:
    len("this")
    type(12)
    print("Hello world")
  These three above are functions - notice they use parentheses, and accept one or more arguments. 

  A method in Python behaves similarly to a function. Methods actually are functions that are called using dot notation. For example, lower() is a string method that can be used like this, on a string called "sample string": sample_string.lower().

  Methods are specific to the data type for a particular variable. 
    
Lists!
  You saw here that you can create a list with square brackets. Lists can contain any mix and match of the data types you have seen so far.
Useful Functions for Lists I
  len() returns how many elements are in a list.
  max() returns the greatest element of the list. 
  min() returns the smallest element in a list. 
  sorted() returns a copy of a list in order from smallest to largest, leaving the list unchanged.
  join()  takes a list of strings as an argument, and returns a string consisting of the list elements joined by a separator string.
  append() adds an element to the end of a list
  
Tuples
  A tuple is another useful container. It's a data type for immutable ordered sequences of elements. They are often used to store related pieces of information. 
  Tuples are similar to lists in that they store an ordered collection of objects which can be accessed by their indices. Unlike lists, however, tuples are immutable - you can't add and remove items from tuples, or sort them in place.
  
Sets
  A set is a data type for mutable unordered collections of unique elements. One application of a set is to quickly remove duplicates from a list.

  numbers = [1, 2, 6, 3, 1, 1, 6]
  unique_nums = set(numbers)
  print(unique_nums)
  This would output:
  {1, 2, 3, 6}

  Sets support the in operator the same as lists do. You can add elements to sets using the add method, and remove elements using the pop method, similar to lists. Although, when you pop an element from a set, a random element is removed. Remember that sets, unlike lists, are unordered so there is no "last element".
  
Dictionaries
  A dictionary is a mutable data type that stores mappings of unique keys to values. Here's a dictionary that stores elements and their atomic numbers.
    elements = {"hydrogen": 1, "helium": 2, "carbon": 6}
  We can check whether a value is in a dictionary the same way we check whether a value is in a list or set with the in keyword. Dicts have a related method that's also useful, get. get looks up values in a dictionary, but unlike square brackets, get returns None (or a default value of your choice) if the key isn't found.
 
Identity Operators 
  You can check if a key returned None with the is operator. You can check for the opposite using is not.
    n = elements.get("dilithium")
    print(n is None)
    print(n is not None)
  
Compound Data Structures
  We can include containers in other containers to create compound data structures.
    elements = {"hydrogen": {"number": 1,
                             "weight": 1.00794,
                             "symbol": "H"},
                  "helium": {"number": 2,
                             "weight": 4.002602,
                             "symbol": "He"}}
  We can access elements in this nested dictionary like this.
    helium = elements["helium"]  # get the helium dictionary
    hydrogen_weight = elements["hydrogen"]["weight"]  # get hydrogen's weight
  You can also add a new key to the element dictionary.
    oxygen = {"number":8,"weight":15.999,"symbol":"O"}  # create a new oxygen dictionary 
    elements["oxygen"] = oxygen  # assign 'oxygen' as a key to the elements dictionary
    print('elements = ', elements)
    
List are sortable, you can add an item to a list with .append and list items are always indexed with numbers starting at 0.
Sets are not ordered, so the order in which items appear can be inconsistent and you add items to sets with .add. Like dictionaries and lists, sets are mutable.You cannot have the same item twice and you cannot sort sets. For these two properties a list would be more appropriate.
Each item in a dictionary contains two parts (a key and a value), the items in a dictionary are not ordered, and we have seen in this lesson examples of nested dictionaries. Because dictionaries are not ordered, they are not sortable. And you do not add items to a dictionary with .append.


LESSON 25
If Statement
  An if statement is a conditional statement that runs or skips code based on whether a condition is true or false.
    if phone_balance < 5:
    phone_balance += 10
    bank_balance -= 10
    
If, Elif, Else
    if season == 'spring':
        print('plant the garden!')
    elif season == 'summer':
        print('water the garden!')
    elif season == 'fall':
        print('harvest the garden!')
    elif season == 'winter':
        print('stay indoors!')
    else:
        print('unrecognized season')
  if: An if statement must always start with an if clause, which contains the first condition that is checked. 
  elif: elif is short for "else if." An elif clause is used to check for an additional condition if the conditions in the previous clauses in the if statement evaluate to False. 
  else: Last is the else clause, which must come at the end of an if statement if used. This clause doesn't require a condition.

  
Complex Boolean Expressions
	If statements sometimes use more complicated boolean expressions for their conditions. They may contain multiple comparisons operators, logical operators, and even calculations. Examples:

	if 18.5 <= weight / height**2 < 25:
		print("BMI is considered 'normal'")

	if is_raining and is_sunny:
		print("Is there a rainbow?")

	if (not unsubscribed) and (location == "USA" or location == "CAN"):
		print("send email")
		
For Loops
	Python has two kinds of loops - for loops and while loops. A for loop is used to "iterate", or do something repeatedly, over an iterable.

	An iterable is an object that can return one of its elements at a time. This can include sequence types, such as strings, lists, and tuples, as well as non-sequence types, such as dictionaries and files.

Using the Range() Function with For Loops
	range() is a built-in function used to create an iterable sequence of numbers. 
	The range() function takes three integer arguments, the first and third of which are optional:
		The 'start' argument is the first number of the sequence. If unspecified, 'start' defaults to 0.
		The 'stop' argument is 1 more than the last number of the sequence. This argument must be specified.
		The 'step' argument is the difference between each number in the sequence. If unspecified, 'step' defaults to 1.
		
Creating and Modifying Lists
	In addition to extracting information from lists, as we did in the first example above, you can also create and modify lists with for loops. You can create a list by appending to a new list at each iteration of the for loop like this:
		# Creating a new list
		cities = ['new york city', 'mountain view', 'chicago', 'los angeles']
		capitalized_cities = []

		for city in cities:
			capitalized_cities.append(city.title())
	Modifying a list is a bit more involved, and requires the use of the range() function.

	We can use the range() function to generate the indices for each value in the cities list. This lets us access the elements of the list with cities[index] so that we can modify the values in the cities list in place.
		cities = ['new york city', 'mountain view', 'chicago', 'los angeles']

		for index in range(len(cities)):
			cities[index] = cities[index].title()clauses in the if statement evaluate to False. 
  else: Last is the else clause, which must come at the end of an if statement if used. This clause doesn't require a condition.

Complex Boolean Expressions
	If statements sometimes use more complicated boolean expressions for their conditions. They may contain multiple comparisons operators, logical operators, and even calculations. Examples:

	if 18.5 <= weight / height**2 < 25:
		print("BMI is considered 'normal'")

	if is_raining and is_sunny:
		print("Is there a rainbow?")

	if (not unsubscribed) and (location == "USA" or location == "CAN"):
		print("send email"FOR NAME
		
For Loops
	Python has two kinds of loops - for loops and while loops. A for loop is used to "iterate", or do something repeatedly, over an iterable.

	An iterable is an object that can return one of its elements at a time. This can include sequence types, such as strings, lists, and tuples, as well as non-sequence types, such as dictionaries and files.

Using the Range() Function with For Loops
	range() is a built-in function used to create an iterable sequence of numbers. 
	The range() function takes three integer arguments, the first and third of which are optional:
		The 'start' argument is the first number of the sequence. If unspecified, 'start' defaults to 0.
		The 'stop' argument is 1 more than the last number of the sequence. This argument must be specified.
		The 'step' argument is the difference between each number in the sequence. If unspecified, 'step' defaults to 1.
		
Creating and Modifying Lists
	In addition to extracting information from lists, as we did in the first example above, you can also create and modify lists with for loops. You can create a list by appending to a new list at each iteration of the for loop like this:
		# Creating a new list
		cities = ['new york city', 'mountain view', 'chicago', 'los angeles']
		capitalized_cities = []

		for city in cities:
			capitalized_cities.append(city.title())
	
	Modifying a list is a bit more involved, and requires the use of the range() function.
	We can use the range() function to generate the indices for each value in the cities list. This lets us access the elements of the list with cities[index] so that we can modify the values in the cities list in place.
		cities = ['new york city', 'mountain view', 'chicago', 'los angeles']

		for index in range(len(cities)):
			cities[index] = cities[index].title()


Iterating Through Dictionaries with For Loops
	cast = {
           "Jerry Seinfeld": "Jerry Seinfeld",
           "Julia Louis-Dreyfus": "Elaine Benes",
           "Jason Alexander": "George Costanza",
           "Michael Richards": "Cosmo Kramer"
       }
	When you iterate through a dictionary using a for loop, doing it the normal way (for n in some_dict) will only give you access to the keys in the dictionary - which is what you'd want in some situations. In other cases, you'd want to iterate through both the keys and values in the dictionary. 
	Iterating through it in the usual way with a for loop would give you just the keys, as shown below:
		for key in cast:
			print(key)
	If you wish to iterate through both keys and values, you can use the built-in method items like this:
		for key, value in cast.items():
			print("Actor: {}    Role: {}".format(key, value))		

While Loops
	For loops are an example of "definite iteration" meaning that the loop's body is run a predefined number of times. This differs from "indefinite iteration" which is when a loop repeats an unknown number of times and ends when some condition is met, which is what happens in a while loop. Here's an example of a while loop.

		card_deck = [4, 11, 8, 5, 13, 2, 8, 10]
		hand = []

		# adds the last element of the card_deck list to the hand list
		# until the values in hand add up to 17 or more
		while sum(hand)  < 17:
			hand.append(card_deck.pop())
	This example features two new functions. sum returns the sum of the elements in a list, and pop is a list method that removes the last element from a list and returns it.

	Components of a While Loop
		The first line starts with the while keyword, indicating this is a while loop.
		Following that is a condition to be checked. In this example, that's sum(hand) <= 17.
		The while loop heading always ends with a colon :.
			Indented after this heading is the body of the while loop. If the condition for the while loop is true, the code lines in the loop's body will be executed.
		We then go back to the while heading line, and the condition is evaluated again. This process of checking the condition and then executing the loop repeats until the condition becomes false.
		When the condition becomes false, we move on to the line following the body of the loop, which will be unindented.
		The indented body of the loop should modify at least one variable in the test condition. If the value of the test condition never changes, the result is an infinite loop!
		
	A factorial of a whole number is that number multiplied by every whole number between itself and 1. For example, 6 factorial (written "6!") equals 6 x 5 x 4 x 3 x 2 x 1 = 720. So 6! = 720.
	
Break, Continue
	Sometimes we need more control over when a loop should end, or skip an iteration. In these cases, we use the break and continue keywords, which can be used in both for and while loops.
		break terminates a loop
		continue skips one iteration of a loop

Zip and Enumerate
	Zip
		zip returns an iterator that combines multiple iterables into one sequence of tuples. Each tuple contains the elements in that position from all the iterables. For example, printing
		list(zip(['a', 'b', 'c'], [1, 2, 3])) would output [('a', 1), ('b', 2), ('c', 3)].
		You could unpack each tuple in a for loop like this.
			letters = ['a', 'b', 'c']
			nums = [1, 2, 3]

			for letter, num in zip(letters, nums):
				print("{}: {}".format(letter, num))
		In addition to zipping two lists together, you can also unzip a list into tuples using an asterisk.
			some_list = [('a', 1), ('b', 2), ('c', 3)]
			letters, nums = zip(*some_list)
	Enumerate
		enumerate is a built in function that returns an iterator of tuples containing indices and values of a list. You'll often use this when you want the index along with each element of an iterable in a loop.

		letters = ['a', 'b', 'c', 'd', 'e']
		for i, letter in enumerate(letters):
			print(i, letter)
		This code would output:

		0 a
		1 b
		2 c
		3 d
		4 e

List Comprehensions
	In Python, you can create lists really quickly and concisely with list comprehensions. This example from earlier:
		capitalized_cities = []
		for city in cities:
			capitalized_cities.append(city.title())
	can be reduced to:
		capitalized_cities = [city.title() for city in cities]
		
Conditionals in List Comprehensions
	You can also add conditionals to list comprehensions (listcomps). After the iterable, you can use the if keyword to check a condition in each iteration.
		squares = [x**2 for x in range(9) if x % 2 == 0]
	If you would like to add else, you have to move the conditionals to the beginning of the listcomp, right after the expression, like this.
		squares = [x**2 if x % 2 == 0 else x + 3 for x in range(9)]	
