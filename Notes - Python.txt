Lesson 24
Arithmetic Operations
  +   addition
  -   subtraction
  *   multiplcation
  /   division
  **  exponential
  %   modulo (returns remainer)
  //  interger diviaon (sums down answer to whole number 3.5=3)
  
There are two Python data types that could be used for numeric values:
  int - for integer values
  float - for decimal or floating point values
  x = int(4.7)   # x is now an integer 4
  y = float(4)   # y is now a float of 4.0

Type And Type Conversion
  You have seen four data types so far:
    int
    float
    bool
    string
    
String Methods
  Methods are like some of the functions you have already seen:
    len("this")
    type(12)
    print("Hello world")
  These three above are functions - notice they use parentheses, and accept one or more arguments. 

  A method in Python behaves similarly to a function. Methods actually are functions that are called using dot notation. For example, lower() is a string method that can be used like this, on a string called "sample string": sample_string.lower().

  Methods are specific to the data type for a particular variable. 
    
Lists!
  You saw here that you can create a list with square brackets. Lists can contain any mix and match of the data types you have seen so far.
Useful Functions for Lists I
  len() returns how many elements are in a list.
  max() returns the greatest element of the list. 
  min() returns the smallest element in a list. 
  sorted() returns a copy of a list in order from smallest to largest, leaving the list unchanged.
  join()  takes a list of strings as an argument, and returns a string consisting of the list elements joined by a separator string.
  append() adds an element to the end of a list
  
Tuples
  A tuple is another useful container. It's a data type for immutable ordered sequences of elements. They are often used to store related pieces of information. 
  Tuples are similar to lists in that they store an ordered collection of objects which can be accessed by their indices. Unlike lists, however, tuples are immutable - you can't add and remove items from tuples, or sort them in place.
  
Sets
  A set is a data type for mutable unordered collections of unique elements. One application of a set is to quickly remove duplicates from a list.

  numbers = [1, 2, 6, 3, 1, 1, 6]
  unique_nums = set(numbers)
  print(unique_nums)
  This would output:
  {1, 2, 3, 6}

  Sets support the in operator the same as lists do. You can add elements to sets using the add method, and remove elements using the pop method, similar to lists. Although, when you pop an element from a set, a random element is removed. Remember that sets, unlike lists, are unordered so there is no "last element".
  
Dictionaries
  A dictionary is a mutable data type that stores mappings of unique keys to values. Here's a dictionary that stores elements and their atomic numbers.
    elements = {"hydrogen": 1, "helium": 2, "carbon": 6}
  We can check whether a value is in a dictionary the same way we check whether a value is in a list or set with the in keyword. Dicts have a related method that's also useful, get. get looks up values in a dictionary, but unlike square brackets, get returns None (or a default value of your choice) if the key isn't found.
 
Identity Operators 
  You can check if a key returned None with the is operator. You can check for the opposite using is not.
    n = elements.get("dilithium")
    print(n is None)
    print(n is not None)
  
