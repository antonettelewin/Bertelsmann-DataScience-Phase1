LESSON 28

	Write a query to return the 10 earliest orders in the orders table. Include the id, occurred_at, and total_amt_usd.
		SELECT id, occurred_at, total_amt_usd
		FROM orders
		ORDER BY occurred_at
		LIMIT 10;
	Write a query to return the top 5 orders in terms of largest total_amt_usd. Include the id, account_id, and total_amt_usd.
		SELECT id, account_id, total_amt_usd
		FROM orders
		ORDER BY total_amt_usd DESC 
		LIMIT 5;
	Write a query to return the bottom 20 orders in terms of least total. Include the id, account_id, and total.
		SELECT id, account_id, total
		FROM orders
		ORDER BY total
		LIMIT 20;
		
	Write a query that returns the top 5 rows from orders ordered according to newest to oldest, but with the largest total_amt_usd for each date listed first for each date. You will notice each of these dates shows up as unique because of the time element. When you learn about truncating dates in a later lesson, you will better be able to tackle this question on a day, month, or yearly basis. 
		SELECT *
		FROM orders
		ORDER BY occurred_at DESC, total_amt_usd DESC 
		LIMIT 5;
	Write a query that returns the top 10 rows from orders ordered according to oldest to newest, but with the smallest total_amt_usd for each date listed first for each date. You will notice each of these dates shows up as unique because of the time element. When you learn about truncating dates in a later lesson, you will better be able to tackle this question on a day, month, or yearly basis. 
		SELECT *
		FROM orders
		ORDER BY occurred_at, total_amt_usd
		LIMIT 10;
		
	Pull the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than or equal to 1000.
		SELECT *
		FROM orders
		WHERE gloss_amt_usd >= 1000
		LIMIT 5;
	Pull the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500.
		SELECT *
		FROM orders
		WHERE total_amt_usd < 500
		LIMIT 10;
	Filter the accounts table to include the company name, website, and the primary point of contact (primary_poc) for Exxon Mobil in the accounts table.
		SELECT name, website, primary_poc
		FROM accounts
		WHERE name = 'Exxon Mobil';
	Using the orders table:
Questions using DERIVED COLUMNS
	Create a column that divides the standard_amt_usd by the standard_qty to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the id and account_id fields. 
		SELECT id, account_id, standard_amt_usd/standard_qty AS unit_price
		FROM orders
		LIMIT 10;
	Write a query that finds the percentage of revenue that comes from poster paper for each order. You will need to use only the columns that end with _usd. (Try to do this without using the total column). Include the id and account_id fields. 
		SELECT id, account_id, 
		   poster_amt_usd/(standard_amt_usd + gloss_amt_usd + poster_amt_usd) AS post_per
		FROM orders;
Questions using LIKE operators
	All the companies whose names start with 'C'. 
		SELECT name
		FROM accounts
		WHERE name LIKE 'C%';
	All companies whose names contain the string 'one' somewhere in the name.
		SELECT name
		FROM accounts
		WHERE name LIKE '%one%';
	All companies whose names end with 's'.
		SELECT name
		FROM accounts
		WHERE name LIKE '%s';
Questions using IN operators
	Use the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.
		SELECT name, primary_poc, sales_rep_id
		FROM accounts
		WHERE name IN ('Walmart', 'Target', 'Nordstrom');
	Use the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords.		
		SELECT *
		FROM web_events
		WHERE channel IN ('organic', 'adwords');	
Questions using NOT operators
	Use the accounts table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom.
		SELECT name, primary_poc, sales_rep_id
		FROM accounts
		WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom');
	Use the web_events table to find all information regarding individuals who were contacted via any method except using organic or adwords methods.	
		SELECT *
		FROM web_events
		WHERE channel NOT IN ('organic', 'adwords');	
	All the companies whose names do not start with 'C'.
		SELECT name
		FROM accounts
		WHERE name NOT LIKE 'C%';
	All companies whose names do not contain the string 'one' somewhere in the name.
		SELECT name
		FROM accounts
		WHERE name NOT LIKE '%one%';
	All companies whose names do not end with 's'.
		SELECT name
		FROM accounts
		WHERE name NOT LIKE '%s';	
Questions using AND and BETWEEN operators
	Write a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0.
		SELECT *
		FROM orders
		WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0;
	Using the accounts table find all the companies whose names do not start with 'C' and end with 's'.
		SELECT name
		FROM accounts
		WHERE name NOT LIKE 'C%' AND name LIKE '%s';
	Use the web_events table to find all information regarding individuals who were contacted via organic or adwords and started their account at any point in 2016 sorted from newest to oldest.
		SELECT *
		FROM web_events
		WHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'
		ORDER BY occurred_at DESC;
Questions using the OR operator
	Find list of orders ids where either gloss_qty or poster_qty is greater than 4000. Only include the id field in the resulting table.
		SELECT id
		FROM orders
		WHERE gloss_qty > 4000 OR poster_qty > 4000;
	Write a query that returns a list of orders where the standard_qty is zero and either the gloss_qty or poster_qty is over 1000.
		SELECT *
		FROM orders
		WHERE standard_qty = 0 AND (gloss_qty > 1000 OR poster_qty > 1000);
	Find all the company names that start with a 'C' or 'W', and the primary contact contains 'ana' or 'Ana', but it doesn't contain 'eana'.
		SELECT *
		FROM accounts
		WHERE (name LIKE 'C%' OR name LIKE 'W%') 
				   AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%') 
				   AND primary_poc NOT LIKE '%eana%');	

	
LESSON 29
Quiz Questions - JOINS
	Try pulling all the data from the accounts table, and all the data from the orders table.
		SELECT orders.*, accounts.*
		FROM accounts
		JOIN orders
		ON accounts.id = orders.account_id;
	Try pulling standard_qty, gloss_qty, and poster_qty from the orders table, and the website and the primary_poc from the accounts table.
		SELECT orders.standard_qty, orders.gloss_qty, 
			   orders.poster_qty,  accounts.website, 
			   accounts.primary_poc
		FROM orders
		JOIN accounts
		ON orders.account_id = accounts.id
Questions JOINS
	Provide a table for all web_events associated with account name of Walmart. There should be three columns. Be sure to include the primary_poc, time of the event, and the channel for each event. Additionally, you might choose to add a fourth column to assure only Walmart events were chosen. 
		SELECT a.primary_poc, w.occurred_at, w.channel, a.name
		FROM web_events w
		JOIN accounts a
		ON w.account_id = a.id
		WHERE a.name = 'Walmart';
	Provide a table that provides the region for each sales_rep along with their associated accounts. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name. 
		SELECT r.name region, s.name rep, a.name account
		FROM sales_reps s
		JOIN region r
		ON s.region_id = r.id
		JOIN accounts a
		ON a.sales_rep_id = s.id
		ORDER BY a.name;
	Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. Your final table should have 3 columns: region name, account name, and unit price. A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero.
		SELECT r.name region, a.name account, 
			   o.total_amt_usd/(o.total + 0.01) unit_price
		FROM region r
		JOIN sales_reps s
		ON s.region_id = r.id
		JOIN accounts a
		ON a.sales_rep_id = s.id
		JOIN orders o
		ON o.account_id = a.id;
Questions
	Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.
		SELECT r.name region, s.name rep, a.name account
		FROM sales_reps s
		JOIN region r
		ON s.region_id = r.id
		JOIN accounts a
		ON a.sales_rep_id = s.id
		WHERE r.name = 'Midwest'
		ORDER BY a.name;
	Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.
		SELECT r.name region, s.name rep, a.name account
		FROM sales_reps s
		JOIN region r
		ON s.region_id = r.id
		JOIN accounts a
		ON a.sales_rep_id = s.id
		WHERE r.name = 'Midwest' AND s.name LIKE 'S%'
		ORDER BY a.name;
	Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a last name starting with K and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.
		SELECT r.name region, s.name rep, a.name account
		FROM sales_reps s
		JOIN region r
		ON s.region_id = r.id
		JOIN accounts a
		ON a.sales_rep_id = s.id
		WHERE r.name = 'Midwest' AND s.name LIKE '% K%'
		ORDER BY a.name;
	Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100. Your final table should have 3 columns: region name, account name, and unit price.
		SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price
		FROM region r
		JOIN sales_reps s
		ON s.region_id = r.id
		JOIN accounts a
		ON a.sales_rep_id = s.id
		JOIN orders o
		ON o.account_id = a.id
		WHERE o.standard_qty > 100;
	Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the smallest unit price first.
		SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price
		FROM region r
		JOIN sales_reps s
		ON s.region_id = r.id
		JOIN accounts a
		ON a.sales_rep_id = s.id
		JOIN orders o
		ON o.account_id = a.id
		WHERE o.standard_qty > 100 AND o.poster_qty > 50
		ORDER BY unit_price;
	Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the largest unit price first.
		SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price
		FROM region r
		JOIN sales_reps s
		ON s.region_id = r.id
		JOIN accounts a
		ON a.sales_rep_id = s.id
		JOIN orders o
		ON o.account_id = a.id
		WHERE o.standard_qty > 100 AND o.poster_qty > 50
		ORDER BY unit_price DESC;
	What are the different channels used by account id 1001? Your final table should have only 2 columns: account name and the different channels. You can try SELECT DISTINCT to narrow down the results to only the unique values.
		SELECT DISTINCT a.name, w.channel
		FROM accounts a
		JOIN web_events w
		ON a.id = w.account_id
		WHERE a.id = '1001';
	Find all the orders that occurred in 2015. Your final table should have 4 columns: occurred_at, account name, order total, and order total_amt_usd.
		SELECT o.occurred_at, a.name, o.total, o.total_amt_usd
		FROM accounts a
		JOIN orders o
		ON o.account_id = a.id
		WHERE o.occurred_at BETWEEN '01-01-2015' AND '01-01-2016'
		ORDER BY o.occurred_at DESC;
LESSON 30 SQL AGGREGATIONS

Aggregation Questions
	Find the total amount of poster_qty paper ordered in the orders table.
		SELECT SUM(poster_qty) AS total_poster_sales
		FROM orders;
	Find the total amount of standard_qty paper ordered in the orders table.
		SELECT SUM(standard_qty) AS total_standard_sales
		FROM orders;
	Find the total dollar amount of sales using the total_amt_usd in the orders table.
		SELECT SUM(total_amt_usd) AS total_dollar_sales
		FROM orders;
	Find the total amount spent on standard_amt_usd and gloss_amt_usd paper for each order in the orders table. This should give a dollar amount for each order in the table.
		SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloss
		FROM orders;
	Find the standard_amt_usd per unit of standard_qty paper. Your solution should use both an aggregation and a mathematical operator.
		SELECT SUM(standard_amt_usd)/SUM(standard_qty) AS standard_price_per_unit
		FROM orders;
Questions: MIN, MAX, & AVERAGE	
	When was the earliest order ever placed?
		SELECT MIN(occurred_at) 
		FROM orders;
	Try performing the same query as in question 1 without using an aggregation function. 
		SELECT occurred_at 
		FROM orders 
		ORDER BY occurred_at
		LIMIT 1;
	When did the most recent (latest) web_event occur?
		SELECT MAX(occurred_at)
		FROM web_events;
	Try to perform the result of the previous query without using an aggregation function.
		SELECT occurred_at
		FROM web_events
		ORDER BY occurred_at DESC
		LIMIT 1;
	Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order. Your final answer should have 6 values - one for each paper type for the average number of sales, as well as the average amount.
		SELECT AVG(standard_qty) mean_standard, AVG(gloss_qty) mean_gloss, 
           AVG(poster_qty) mean_poster, AVG(standard_amt_usd) mean_standard_usd, 
           AVG(gloss_amt_usd) mean_gloss_usd, AVG(poster_amt_usd) mean_poster_usd
		FROM orders;
	what is the MEDIAN total_usd spent on all orders? Note, this is more advanced than the topics we have covered thus far to build a general solution, but we can hard code a solution in the following way.
		SELECT *
		FROM (SELECT total_amt_usd
			  FROM orders
			  ORDER BY total_amt_usd
			  LIMIT 3457) AS Table1
		ORDER BY total_amt_usd DESC
		LIMIT 2;
Solutions: GROUP BY
	Which account (by name) placed the earliest order? Your solution should have the account name and the date of the order.
		SELECT a.name, o.occurred_at
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		ORDER BY occurred_at
		LIMIT 1;
	Find the total sales in usd for each account. You should include two columns - the total sales for each company's orders in usd and the company name.
		SELECT a.name, SUM(total_amt_usd) total_sales
		FROM orders o
		JOIN accounts a
		ON a.id = o.account_id
		GROUP BY a.name;
	Via what channel did the most recent (latest) web_event occur, which account was associated with this web_event? Your query should return only three values - the date, channel, and account name.
		SELECT w.occurred_at, w.channel, a.name
		FROM web_events w
		JOIN accounts a
		ON w.account_id = a.id 
		ORDER BY w.occurred_at DESC
		LIMIT 1;
	Find the total number of times each type of channel from the web_events was used. Your final table should have two columns - the channel and the number of times the channel was used.
		SELECT w.channel, COUNT(*)
		FROM web_events w
		GROUP BY w.channel
	Who was the primary contact associated with the earliest web_event?
		SELECT a.primary_poc
		FROM web_events w
		JOIN accounts a
		ON a.id = w.account_id
		ORDER BY w.occurred_at
		LIMIT 1;
	What was the smallest order placed by each account in terms of total usd. Provide only two columns - the account name and the total usd. Order from smallest dollar amounts to largest.
		SELECT a.name, MIN(total_amt_usd) smallest_order
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.name
		ORDER BY smallest_order;
		Sort of strange we have a bunch of orders with no dollars. We might want to look into those. 

	Find the number of sales reps in each region. Your final table should have two columns - the region and the number of sales_reps. Order from fewest reps to most reps.
		SELECT r.name, COUNT(*) num_reps
		FROM region r
		JOIN sales_reps s
		ON r.id = s.region_id
		GROUP BY r.name
		ORDER BY num_reps;
	
	For each account, determine the average amount of each type of paper they purchased across their orders. Your result should have four columns - one for the account name and one for the average spent on each of the paper types.
		SELECT a.name, AVG(o.standard_qty) avg_stand, AVG(o.gloss_qty) avg_gloss, AVG(o.poster_qty) avg_post
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.name;
	For each account, determine the average amount spent per order on each paper type. Your result should have four columns - one for the account name and one for the average amount spent on each paper type.
		SELECT a.name, AVG(o.standard_amt_usd) avg_stand, AVG(o.gloss_amt_usd) avg_gloss, AVG(o.poster_amt_usd) avg_post
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.name;
	Determine the number of times a particular channel was used in the web_events table for each sales rep. Your final table should have three columns - the name of the sales rep, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.
		SELECT s.name, w.channel, COUNT(*) num_events
		FROM accounts a
		JOIN web_events w
		ON a.id = w.account_id
		JOIN sales_reps s
		ON s.id = a.sales_rep_id
		GROUP BY s.name, w.channel
		ORDER BY num_events DESC;
	Determine the number of times a particular channel was used in the web_events table for each region. Your final table should have three columns - the region name, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.
		SELECT r.name, w.channel, COUNT(*) num_events
		FROM accounts a
		JOIN web_events w
		ON a.id = w.account_id
		JOIN sales_reps s
		ON s.id = a.sales_rep_id
		JOIN region r
		ON r.id = s.region_id
		GROUP BY r.name, w.channel
		ORDER BY num_events DESC;	
Solutions: DISTINCT
	Use DISTINCT to test if there are any accounts associated with more than one region.
	The below two queries have the same number of resulting rows (351), so we know that every account is associated with only one region. If each account was associated with more than one region, the first query should have returned more rows than the second query.

		SELECT a.id as "account id", r.id as "region id", 
		a.name as "account name", r.name as "region name"
		FROM accounts a
		JOIN sales_reps s
		ON s.id = a.sales_rep_id
		JOIN region r
		ON r.id = s.region_id;
	and

		SELECT DISTINCT id, name
		FROM accounts;
	Have any sales reps worked on more than one account?

	Actually all of the sales reps have worked on more than one account. The fewest number of accounts any sales rep works on is 3. There are 50 sales reps, and they all have more than one account. Using DISTINCT in the second query assures that all of the sales reps are accounted for in the first query.

		SELECT s.id, s.name, COUNT(*) num_accounts
		FROM accounts a
		JOIN sales_reps s
		ON s.id = a.sales_rep_id
		GROUP BY s.id, s.name
		ORDER BY num_accounts;
	and

		SELECT DISTINCT id, name
		FROM sales_reps;	

Solutions: HAVING
	How many of the sales reps have more than 5 accounts that they manage?
		SELECT s.id, s.name, COUNT(*) num_accounts
		FROM accounts a
		JOIN sales_reps s
		ON s.id = a.sales_rep_id
		GROUP BY s.id, s.name
		HAVING COUNT(*) > 5
		ORDER BY num_accounts;
	and technically, we can get this using a SUBQUERY as shown below. This same logic can be used for the other queries, but this will not be shown.
		SELECT COUNT(*) num_reps_above5
		FROM(SELECT s.id, s.name, COUNT(*) num_accounts
			 FROM accounts a
			 JOIN sales_reps s
			 ON s.id = a.sales_rep_id
			 GROUP BY s.id, s.name
			 HAVING COUNT(*) > 5
			 ORDER BY num_accounts) AS Table1;
	How many accounts have more than 20 orders?
		SELECT a.id, a.name, COUNT(*) num_orders
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.id, a.name
		HAVING COUNT(*) > 20
		ORDER BY num_orders;
	Which account has the most orders?
		SELECT a.id, a.name, COUNT(*) num_orders
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.id, a.name
		ORDER BY num_orders DESC
		LIMIT 1;
	How many accounts spent more than 30,000 usd total across all orders?
		SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.id, a.name
		HAVING SUM(o.total_amt_usd) > 30000
		ORDER BY total_spent;
	How many accounts spent less than 1,000 usd total across all orders?
		SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.id, a.name
		HAVING SUM(o.total_amt_usd) < 1000
		ORDER BY total_spent;
	Which account has spent the most with us?
		SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.id, a.name
		ORDER BY total_spent DESC
		LIMIT 1;
	Which account has spent the least with us?
		SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
		FROM accounts a
		JOIN orders o
		ON a.id = o.account_id
		GROUP BY a.id, a.name
		ORDER BY total_spent
		LIMIT 1;
	Which accounts used facebook as a channel to contact customers more than 6 times?
		SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
		FROM accounts a
		JOIN web_events w
		ON a.id = w.account_id
		GROUP BY a.id, a.name, w.channel
		HAVING COUNT(*) > 6 AND w.channel = 'facebook'
		ORDER BY use_of_channel;
	Which account used facebook most as a channel?
		SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
		FROM accounts a
		JOIN web_events w
		ON a.id = w.account_id
		WHERE w.channel = 'facebook'
		GROUP BY a.id, a.name, w.channel
		ORDER BY use_of_channel DESC
		LIMIT 1;
	Which channel was most frequently used by most accounts?
		SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
		FROM accounts a
		JOIN web_events w
		ON a.id = w.account_id
		GROUP BY a.id, a.name, w.channel
		ORDER BY use_of_channel DESC
		LIMIT 10;
		All of the top 10 are direct.	

Solutions: Working With DATEs
	Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. Do you notice any trends in the yearly sales totals?
		 SELECT DATE_PART('year', occurred_at) ord_year,  SUM(total_amt_usd) total_spent
		 FROM orders
		 GROUP BY 1
		 ORDER BY 2 DESC;
	When we look at the yearly totals, you might notice that 2013 and 2017 have much smaller totals than all other years. If we look further at the monthly data, we see that for 2013 and 2017 there is only one month of sales for each of these years (12 for 2013 and 1 for 2017). Therefore, neither of these are evenly represented. Sales have been increasing year over year, with 2016 being the largest sales to date. At this rate, we might expect 2017 to have the largest sales.

	Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset?
	In order for this to be 'fair', we should remove the sales from 2013 and 2017. For the same reasons as discussed above.
		SELECT DATE_PART('month', occurred_at) ord_month, SUM(total_amt_usd) total_spent
		FROM orders
		WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
		GROUP BY 1
		ORDER BY 2 DESC; 
	or
		SELECT DATE_PART('year', occurred_at),  SUM(total_amt_usd)
		 FROM orders
		 GROUP BY DATE_PART('year', occurred_at)
		 ORDER BY SUM(total_amt_usd) DESC;
	The greatest sales amounts occur in December (12). 

	Which year did Parch & Posey have the greatest sales in terms of total number of orders? Are all years evenly represented by the dataset?
		SELECT DATE_PART('year', occurred_at) ord_year,  COUNT(*) total_sales
		FROM orders
		GROUP BY 1
		ORDER BY 2 DESC;
	or
		SELECT DATE_PART('year', occurred_at),  COUNT(*)
		FROM orders
		GROUP BY DATE_PART('year', occurred_at)
		ORDER BY COUNT(*) DESC;
	Again, 2016 by far has the most amount of orders, but again 2013 and 2017 are not evenly represented to the other years in the dataset.

	Which month did Parch & Posey have the greatest sales in terms of total number of orders? Are all months evenly represented by the dataset?
		SELECT DATE_PART('month', occurred_at) ord_month, COUNT(*) total_sales
		FROM orders
		WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
		GROUP BY 1
		ORDER BY 2 DESC; 
	or
		SELECT DATE_PART('month', occurred_at), COUNT(*) 
		FROM orders
		WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
		GROUP BY DATE_PART('month', occurred_at)
		ORDER BY COUNT DESC; 
	December still has the most sales, but interestingly, November has the second most sales (but not the most dollar sales. To make a fair comparison from one month to another 2017 and 2013 data were removed.

	In which month of which year did Walmart spend the most on gloss paper in terms of dollars?
		SELECT DATE_TRUNC('month', o.occurred_at) ord_date, SUM(o.gloss_amt_usd) tot_spent
		FROM orders o 
		JOIN accounts a
		ON a.id = o.account_id
		WHERE a.name = 'Walmart'
		GROUP BY 1
		ORDER BY 2 DESC
		LIMIT 1;
	or
		SELECT DATE_TRUNC('month', o.occurred_at), SUM(o.gloss_amt_usd)
		FROM orders o 
		JOIN accounts a
		ON a.id = o.account_id
		WHERE a.name = 'Walmart'
		GROUP BY DATE_TRUNC('month', o.occurred_at)
		ORDER BY SUM DESC
		LIMIT 1;
	May 2016 was when Walmart spent the most on gloss paper.	

Solutions: CASE
	We would like to understand 3 different branches of customers based on the amount associated with their purchases. The top branch includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd. The second branch is between 200,000 and 100,000 usd. The lowest branch is anyone under 100,000 usd. Provide a table that includes the level associated with each account. You should provide the account name, the total sales of all orders for the customer, and the level. Order with the top spending customers listed first.
		SELECT a.name, SUM(total_amt_usd) total_spent, 
			 CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
			 WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
			 ELSE 'low' END AS customer_level
		FROM orders o
		JOIN accounts a
		ON o.account_id = a.id 
		GROUP BY a.name
		ORDER BY 2 DESC;
	
	We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 2016 and 2017. Keep the same levels as in the previous question. Order with the top spending customers listed first.
		SELECT a.name, SUM(total_amt_usd) total_spent, 
			 CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
			 WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
			 ELSE 'low' END AS customer_level
		FROM orders o
		JOIN accounts a
		ON o.account_id = a.id
		WHERE occurred_at > '2015-12-31' 
		GROUP BY 1
		ORDER BY 2 DESC;
	
	We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders. Create a table with the sales rep name, the total number of orders, and a column with top or not depending on if they have more than 200 orders. Place the top sales people first in your final table.
		SELECT s.name, COUNT(*) num_ords,
			 CASE WHEN COUNT(*) > 200 THEN 'top'
			 ELSE 'not' END AS sales_rep_level
		FROM orders o
		JOIN accounts a
		ON o.account_id = a.id 
		JOIN sales_reps s
		ON s.id = a.sales_rep_id
		GROUP BY s.name
		ORDER BY 2 DESC;
	It is worth mentioning that this assumes each name is unique - which has been done a few times. We otherwise would want to break by the name and the id of the table.

	The previous didn't account for the middle, nor the dollar amount associated with the sales. Management decides they want to see these characteristics represented as well. We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders or more than 750000 in total sales. The middle group has any rep with more than 150 orders or 500000 in sales. Create a table with the sales rep name, the total number of orders, total sales across all orders, and a column with top, middle, or low depending on this criteria. Place the top sales people based on dollar amount of sales first in your final table.
		SELECT s.name, COUNT(*), SUM(o.total_amt_usd) total_spent, 
			 CASE WHEN COUNT(*) > 200 OR SUM(o.total_amt_usd) > 750000 THEN 'top'
			 WHEN COUNT(*) > 150 OR SUM(o.total_amt_usd) > 500000 THEN 'middle'
			 ELSE 'low' END AS sales_rep_level
		FROM orders o
		JOIN accounts a
		ON o.account_id = a.id 
		JOIN sales_reps s
		ON s.id = a.sales_rep_id
		GROUP BY s.name
		ORDER BY 3 DESC;	
