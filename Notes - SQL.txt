LESSON 28

Entity Relationship Diagrams
	An entity relationship diagram (ERD) is a common way to view data in a database. 
	https://classroom.udacity.com/courses/ud002-bert/lessons/614cf95a-13bf-406c-b092-e757178e633b/concepts/63924491-9491-4fb8-b39b-611a613c25fd#
	
	The "crow's foot" that connects the tables together shows us how the columns in one table relate to the columns in another table.

The three lessons in this course aim at the following components of SQL:

	SQL Basics - Here you will get your first taste at how SQL works, and learn the basics of the SQL language. You will learn how to write code to interact with tables similar to the ones we analyzed in Excel earlier. Specifically, you will learn a little about databases, the basic syntax of SQL, and you will write your first queries!

	SQL Joins - In this lesson, you will learn the real power of SQL. You will learn about Entity Relationship Diagrams (ERDs), and how to join multiple tables together from a relational database. The power to join tables is what really moved companies to adopt this approach to holding data.

	SQL Aggregations - In this final lesson, you will learn some more advanced features of SQL. You will gain the ability to summarize data from multiple tables in a database. 
		
SQL vs. NoSQL
	You may have heard of NoSQL, which stands for not only SQL. Databases using NoSQL allow for you to write code that interacts with the data a bit differently than what we will do in this course. These NoSQL environments tend to be particularly popular for web based data, but less popular for data that lives in spreadsheets the way we have been analyzing data up to this point. One of the most popular NoSQL languages is called MongoDB. 
	
Here you were introduced to two statements that will be used in every query you write
	SELECT is where you tell the query what columns you want back.
	FROM is where you tell the query what table you are querying from. Notice the columns need to exist in this table.	
	The ORDER BY statement allows us to order our table by any row. If you are familiar with Excel, this is similar to the sorting you can do with filters.
	The ORDER BY statement is always after the SELECT and FROM statements, but it is before the LIMIT statement. As you learn additional commands, the order of these statements will matter more. If we are using the LIMIT statement, it will always appear last.
	Using the WHERE statement, we can subset out tables based on conditions that must be met. 
	Creating a new column that is a combination of existing columns is known as a derived column.
	LIKE - This allows you to perform operations similar to using WHERE and =, but for cases when you might not know exactly what you are looking for.
	IN - This allows you to perform operations similar to using WHERE and =, but for more than one condition.
	NOT - This is used with IN and LIKE to select all of the rows NOT LIKE or NOT IN a certain condition.
	AND & BETWEEN - These allow you to combine operations where all combined conditions must be true.
	OR - This allow you to combine operations where at least one of the combined conditions must be true.
	By specifying NOT LIKE or NOT IN, we can grab all of the rows that do not meet a particular criteria.
	Similar to the AND operator, the OR operator can combine multiple statements. Each time you link a new statement with an OR, you will need to specify the column you are interested in looking at
	

LESSON 29
	The JOIN introduces the second table from which you would like to pull data, and the ON tells you how you would like to merge the tables in the FROM and JOIN statements together.
	The ON statement holds the two columns that get linked across the two tables. This will be the focus in the next concepts.
	A primary key is a unique column in a particular table.are unique for every row in a table. 
	A foreign key are the primary key appearing in another table, which allows the rows to be non-unique.
	INNER JOINs - pulled rows only if they exist as a match across two tables.
	LEFT JOIN - a way to pull all of the rows from the table in the FROM even if they do not exist in the JOIN statement.
	RIGHT JOIN - a way to pull all of the rows from the table in the JOIN even if they do not exist in the FROM statement.
	FULL OUTER JOIN - This will return the inner join result set, as well as any unmatched rows from either of the two tables being joined.
	foreign keys - 
	Unlike COUNT, you can only use SUM on numeric columns. However, SUM will ignore NULL values, as do the other aggregation functions you will see in the upcoming lessons.
	
LESSON 30 SQL AGGREGATIONS

	GROUP BY can be used to aggregate data within subsets of the data. For example, grouping for different accounts, different regions, or different sales representatives.
	Any column in the SELECT statement that is not within an aggregator must be in the GROUP BY clause.
	The GROUP BY always goes between WHERE and ORDER BY.
	ORDER BY works like SORT in spreadsheet 
	DISTINCT is always used in SELECT statements, and it provides the unique rows for all columns written in the SELECT statement. Therefore, you only use DISTINCT once in any particular SELECT statement.
	DATE_TRUNC allows you to truncate your date to a particular part of your date-time column. Common trunctions are day, month, and year. Here is a great blog post by Mode Analytics on the power of this function.
	DATE_PART can be useful for pulling a specific portion of a date, but notice pulling month or day of the week (dow) means that you are no longer keeping the years in order. Rather you are grouping for certain components regardless of which year they belonged in.
	CASE - Expert Tip
		The CASE statement always goes in the SELECT clause.
		CASE must include the following components: WHEN, THEN, and END. ELSE is an optional component to catch cases that didnâ€™t meet any of the other previous CASE conditions.

LESSON 31: SQL Subqueries & Temporary Tables

Note that you should not include an alias when you write a subquery in a conditional statement. This is because the subquery is treated as an individual value (or set of values in the IN case) rather than as a table.
