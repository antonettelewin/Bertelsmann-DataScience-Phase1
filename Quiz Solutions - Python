
LESSON 24
Solution: Assign and Modify Variables
This is our solution to the previous quiz:
  # The current volume of a water reservoir (in cubic metres)
  reservoir_volume = 4.445e8
  # The amount of rainfall from a storm (in cubic metres)
  rainfall = 5e6
  # decrease the rainfall variable by 10% to account for runoff
  rainfall *= .9
  # add the rainfall variable to the reservoir_volume variable
  reservoir_volume += rainfall
  # increase reservoir_volume by 5% to account for stormwater that flows
  # into the reservoir in the days following the storm
  reservoir_volume *= 1.05
  # decrease reservoir_volume by 5% to account for evaporation
  reservoir_volume *= 0.95
  # subtract 2.5e5 cubic metres from reservoir_volume to account for water
  # that's piped to arid regions.
  reservoir_volume -= 2.5e5 
  # print the new value of the reservoir_volume variable
print(reservoir_volume)

Quiz: Which is denser, Rio or San Francisco?
  print(san_francisco_pop_density > rio_de_janeiro_pop_density)
  Note other solutions are possible, like the one below, but take a moment to make sure you understand 
  and appreciate the concise efficiency of the one line above!

    if (san_francisco_pop_density > rio_de_janeiro_pop_density):
          print (True)
      else:
          print (False)

Quiz: Fix the Quote
  Here are two different methods to fix the quote:

  # TODO: Fix this string!
  ford_quote = 'Whether you think you can, or you think you can\'t--you\'re right.'

  # TODO: Fix this string!
  ford_quote = "Whether you think you can, or you think you can't--you're right."

Quiz: Write a Server Log Message
  Here are a couple of options for this one:

  print (username + " accessed the site " + url + " at " + timestamp + ".")

  OR

  message = username + " accessed the site " + url + " at " + timestamp + "."
  print(message)

Quiz: len
  name_length = len(given_name) + len(middle_names) + len(family_name) + 2

Quiz: Total Sales
  weekly_sales = int(mon_sales) + int(tues_sales) + int(wed_sales) + int(thurs_sales) + int(fri_sales)
  weekly_sales = str(weekly_sales)  #convert the type back!!
  print("This week's total sales: " + weekly_sales)

elements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},
            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}

Quiz: Adding Values to Nested Dictionaries
  elements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},
            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}
  # todo: Add an 'is_noble_gas' entry to the hydrogen and helium dictionaries
  # hint: helium is a noble gas, hydrogen isn't
  elements['hydrogen']['is_noble_gas'] = False
  elements['helium']['is_noble_gas'] = True
  print(elements['hydrogen']['is_noble_gas'])
print(elements['helium']['is_noble_gas'])


LESSON 25
#First Example - try changing the value of phone_balance
	phone_balance = 10
	bank_balance = 50

	if phone_balance < 10:
		phone_balance += 10
		bank_balance -= 10

	print(phone_balance)
	print(bank_balance)

#Second Example - try changing the value of number

	number = 145
	if number % 2 == 0:
		print("Number " + str(number) + " is even.")
	else:
		print("Number " + str(number) + " is odd.")

#Third Example - try to change the value of age
	age = 35

	# Here are the age limits for bus fares
	free_up_to_age = 4
	child_up_to_age = 18
	senior_from_age = 65

	# These lines determine the bus fare prices
	concession_ticket = 1.25
	adult_ticket = 2.50

	# Here is the logic for bus fare prices
	if age <= free_up_to_age:
		ticket_price = 0
	elif age <= child_up_to_age:
		ticket_price = concession_ticket
	elif age >= senior_from_age:
		ticket_price = concession_ticket
	else:
		ticket_price = adult_ticket

	message = "Somebody who is {} years old will pay ${} to ride the bus.".format(age, ticket_price)
	print(message)

Quiz Solution: Which Prize
	points = 174  # use this input to make your submission

	# write your if statement here
	if points >= 1 and points<=50 :
		result = "Congratulations! You won a wooden rabbit!"
		
	elif points >=151 and points<=180:
		result = "Congratulations! You won a wafer-thin mint!"
		
	elif points >=181 and points<=200:
		result = "Congratulations! You won a penguin!"
		
	else:
		result = "Oh dear, no prize this time."
	print(result)
	
	
	points = 174

	if points <= 50:
		result = "Congratulations! You won a wooden rabbit!"
	elif points <= 150:
		result = "Oh dear, no prize this time."
	elif points <= 180:
		result = "Congratulations! You won a wafer-thin mint!"
	else:
		result = "Congratulations! You won a penguin!"

	print(result)
	
	
Quiz: Guess My Number	
	# '''
	# You decide you want to play a game where you are hiding 
	# a number from someone.  Store this number in a variable 
	# called 'answer'.  Another user provides a number called
	# 'guess'.  By comparing guess to answer, you inform the user
	# if their guess is too high or too low.

	# Fill in the conditionals below to inform the user about how
	# their guess compares to the answer.
	# '''
	answer = 7
	guess = 3

	if answer > guess :
		result = "Oops!  Your guess was too low."
	elif answer < guess :
		result = "Oops!  Your guess was too high."
	elif answer == guess:
		result = "Nice!  Your guess matched the answer!"

	print(result)
	
	
Quiz: Tax Purchase	
	# '''
	# Depending on where an individual is from we need to tax them 
	# appropriately.  The states of CA, MN, and 
	# NY have taxes of 7.5%, 9.5%, and 8.9% respectively.
	# Use this information to take the amount of a purchase and 
	# the corresponding state to assure that they are taxed by the right
	# amount.
	# '''
	state = 'NY'
	purchase_amount = 132

	if state == 'CA' :
		tax_amount = .075
		total_cost = purchase_amount*(1+tax_amount)
		result = "Since you're from {}, your total cost is {}.".format(state, total_cost)

	elif state == 'MN' :
		tax_amount = .095
		total_cost = purchase_amount*(1+tax_amount)
		result = "Since you're from {}, your total cost is {}.".format(state, total_cost)

	elif state == 'NY' :
		tax_amount = .089
		total_cost = purchase_amount*(1+tax_amount)
		result = "Since you're from {}, your total cost is {}.".format(state, total_cost)

	print(result)
	
	
Quiz Solution: Using Truth Values of Objects
	points = 174

	points = 174  # use this input when submitting your answer

	# set prize to default value of None
	prize = None

	# use the value of points to assign prize to the correct prize name
	if points <= 50:
		prize = "wooden rabbit"
	elif 151 <= points <= 180:
		prize = "wafer-thin mint"
	elif points >= 181:
		prize = "penguin"

	# use the truth value of prize to assign result to the correct message
	if prize:
		result = "Congratulations! You won a {}!".format(prize)
	else:
		result = "Oh dear, no prize this time."

	print(result)
Quiz: Create Usernames
	names = ["Joey Tribbiani", "Monica Geller", "Chandler Bing", "Phoebe Buffay"]
	usernames = []

	# write your for loop here
	for name in names:
		usernames.append(name.lower().replace(" ", "_"))

	print(usernames)

Quiz: Modify Usernames with Range	
	usernames = ["Joey Tribbiani", "Monica Geller", "Chandler Bing", "Phoebe Buffay"]

	# write your for loop here
	for i in range(len(usernames)):
		usernames[i] = usernames[i].lower().replace(" ", "_")

	print(usernames)
	
Quiz: Tag Counter
Write a for loop that iterates over a list of strings, tokens, and counts how many of them are XML tags. XML is a data language similar to HTML. You can tell if a string is an XML tag if it begins with a left angle bracket "<" and ends with a right angle bracket ">". Keep track of the number of tags using the variable count.
	tokens = ['<greeting>', 'Hello World!', '</greeting>']

	count = 0
	for token in tokens:
		if token[0] == '<' and token[-1] == '>':
			count += 1

	print(count)
	
Quiz Solution: Create an HTML List
Write some code, including a for loop, that iterates over a list of strings and creates a single string, html_str, which is an HTML list. For example, if the list is items = ['first string', 'second string'], printing html_str should output:
<ul>
<li>first string</li>
<li>second string</li>
</ul>

	items = ['first string', 'second string']
	html_str = "<ul>\n"          # The "\n" here is the end-of-line char, causing
								 # chars after this in html_str to be on next line

	for item in items:
		html_str += "<li>{}</li>\n".format(item)
	html_str += "</ul>"

	print(html_str)
Solution: Fruit Basket - Tasks 1
	# You would like to count the number of fruits in your basket. 
	# In order to do this, you have the following dictionary and list of
	# fruits.  Use the dictionary and list to count the total number
	# of fruits, but you do not want to count the other items in your basket.

	result = 0
	basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
	fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

	#Iterate through the dictionary
	for fruit, count in basket_items.items():
	#if the key is in the list of fruits, add the value (number of fruits) to result
	   if fruit in fruits:
		   result += count
	print("There are {} fruits in the basket.".format(result))
	Output:
	There are 23 fruits in the basket.

Quiz: Fruit Basket - Task 2
	#Example 1

		result = 0
		basket_items = {'pears': 5, 'grapes': 19, 'kites': 3, 'sandwiches': 8, 'bananas': 4}
		fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

		# Your previous solution here
		#Iterate through the dictionary
		for fruit, count in basket_items.items():
		#if the key is in the list of fruits, add the value (number of fruits) to result
		   if fruit in fruits:
			   result += count
		print(result)

	#Example 2

		result = 0
		basket_items = {'peaches': 5, 'lettuce': 2, 'kites': 3, 'sandwiches': 8, 'pears': 4}
		fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

		# Your previous solution here
		#Iterate through the dictionary
		for fruit, count in basket_items.items():
		#if the key is in the list of fruits, add the value (number of fruits) to result
		   if fruit in fruits:
			   result += count
		print(result)


	#Example 3

		result = 0
		basket_items = {'lettuce': 2, 'kites': 3, 'sandwiches': 8, 'pears': 4, 'bears': 10}
		fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

		# Your previous solution here
		#Iterate through the dictionary
		for fruit, count in basket_items.items():
		#if the key is in the list of fruits, add the value (number of fruits) to result
		   if fruit in fruits:
			   result += count
		print(result)
	
	
	
Solution: Fruit Basket - Task 3

	# You would like to count the number of fruits in your basket. 
	# In order to do this, you have the following dictionary and list of
	# fruits.  Use the dictionary and list to count the total number
	# of fruits and not_fruits.

	fruit_count, not_fruit_count = 0, 0
	basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
	fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

	#Iterate through the dictionary
	for fruit, count in basket_items.items():
	#if the key is in the list of fruits, add to fruit_count.
		if fruit in fruits:
		   fruit_count += count
	#if the key is not in the list, then add to the not_fruit_count
		else:
			not_fruit_count += count
	print(fruit_count, not_fruit_count)
	print("The number of fruits is {}.  There are {} items that are not fruits.".format(fruit_count, not_fruit_count))
	Output:
	The number of fruits is 23.  There are 11 items that are not fruits.
	
	
Solution: Water Falls
	print_str = "Water falls"

	# initialize a counting variable "i" to 0 - you'll use this to track which character of the string you're on
	i = 0
	# write while loop header line, comparing "i" to the length of the string
	while i < len(print_str):
		 # here in the body of the loop, print out the current character from the string
		print(print_str[i])
		# increment your counter variable in the body of the loop, so you don't loop forever!
		i += 1

Solution: Factorials with While Loops
	# Start with a sample number for first test - change this when testing your code more!
	number = 6   
	# We'll always start with our product equal to the number
	product = number

	# Write while loop header line - how will you tell it when to stop looping?
	while  number > 1:
		# Each time through the loop, what do we want to do to our number?
		number -= 1
		# Each time, what do we want to multiply the current product by?
		product *= number
	# Print out final product (how do we indicate this should happen after loop ends?)
	print(product)

Solution: Factorials with For Loops
	# This is the number we'll find the factorial of - change it to test your code!
	number = 6
	# We'll start with the product equal to the number
	product = number

	# Write a for loop that calculates the factorial of our number 
	for num in range(1, number):
		product *= num

	# print the factorial of your number
	print(product)	
	
Solution: Count By
	start_num = 5 #provide some start number
	end_num = 100 #provide some end number that you stop when you hit
	count_by = 2 #provide some number to count by 
	break_num = start_num
	# write a while loop that uses break_num as the ongoing number to 
	#   check against end_num
	while end_num > break_num:
		break_num += count_by
	print(break_num)
	Output:
	101

Quiz: Count By Check
start_num = 5
end_num = 100
count_by = 2

if start_num > end_num:
    result = "Oops!  Looks like your start value is greater than the end value.  Please try again."

else:
    break_num = start_num
    while break_num < end_num:
        break_num += count_by

    result = break_num

print(result)
Output:
101

Solution: Nearest Square
	limit = 40

	num = 0
	while (num+1)**2 < limit:
		num += 1
	nearest_square = num**2

	print(nearest_square)
	Output:
	36
	limit = 40
	x=0

	# write your while loop here
	while x*x < limit:
		 nearest_square = x*x
		 x+=1
	print(nearest_square)

Practice Break Vs Continue	
	manifest = [("bananas", 15), ("mattresses", 24), ("dog kennels", 42), ("machine", 120), ("cheeses", 5)]

	# the code breaks the loop when weight exceeds or reaches the limit
	print("METHOD 1")
	weight = 0
	items = []
	for cargo_name, cargo_weight in manifest:
		print("current weight: {}".format(weight))
		if weight >= 100:
			print("  breaking loop now!")
			break
		else:
			print("  adding {} ({})".format(cargo_name, cargo_weight))
			items.append(cargo_name)
			weight += cargo_weight

	print("\nFinal Weight: {}".format(weight))
	print("Final Items: {}".format(items))

	# skips an iteration when adding an item would exceed the limit
	# breaks the loop if weight is exactly the value of the limit
	print("\nMETHOD 2")
	weight = 0
	items = []
	for cargo_name, cargo_weight in manifest:
		print("current weight: {}".format(weight))
		if weight >= 100:
			print("  breaking from the loop now!")
			break
		elif weight + cargo_weight > 100:
			print("  skipping {} ({})".format(cargo_name, cargo_weight))
			continue
		else:
			print("  adding {} ({})".format(cargo_name, cargo_weight))
			items.append(cargo_name)
			weight += cargo_weight

	print("\nFinal Weight: {}".format(weight))
	print("Final Items: {}".format(items))
	
	OUTPUT
	METHOD 1
	current weight: 0
	  adding bananas (15)
	current weight: 15
	  adding mattresses (24)
	current weight: 39
	  adding dog kennels (42)
	current weight: 81
	  adding machine (120)
	current weight: 201
	  breaking loop now!

	Final Weight: 201
	Final Items: ['bananas', 'mattresses', 'dog kennels', 'machine']

	METHOD 2
	current weight: 0
	  adding bananas (15)
	current weight: 15
	  adding mattresses (24)
	current weight: 39
	  adding dog kennels (42)
	current weight: 81
	  skipping machine (120)
	current weight: 81
	  adding cheeses (5)

	Final Weight: 86
	Final Items: ['bananas', 'mattresses', 'dog kennels', 'cheeses']

	
Quiz Solution: Break the String
Here's one way you could do this.

	headlines = ["Local Bear Eaten by Man",
				 "Legislature Announces New Laws",
				 "Peasant Discovers Violence Inherent in System",
				 "Cat Rescues Fireman Stuck in Tree",
				 "Brave Knight Runs Away",
				 "Papperbok Review: Totally Triffic"]

	news_ticker = ""
	for headline in headlines:
		news_ticker += headline + " "
		if len(news_ticker) >= 140:
			news_ticker = news_ticker[:140]
			break

	print(news_ticker)
	Output:
	Local Bear Eaten by Man Legislature Announces New Laws Peasant Discovers Violence Inherent in System Cat Rescues Fireman Stuck in Tree Brave	

Quiz Solution: Break the String
	headlines = ["Local Bear Eaten by Man",
				 "Legislature Announces New Laws",
				 "Peasant Discovers Violence Inherent in System",
				 "Cat Rescues Fireman Stuck in Tree",
				 "Brave Knight Runs Away",
				 "Papperbok Review: Totally Triffic"]

	news_ticker = ""
	for headline in headlines:
		news_ticker += headline + " "
		if len(news_ticker) >= 140:
			news_ticker = news_ticker[:140]
			break

	print(news_ticker)
	
	Output:
		Local Bear Eaten by Man Legislature Announces New Laws Peasant Discovers Violence Inherent in System Cat Rescues Fireman Stuck in Tree Brave
	
	
Quiz Solution: Zip Coordinates
Use zip to write a for loop that creates a string specifying the label and coordinates of each point and appends it to the list points. Each string should be formatted as label: x, y, z. For example, the string for the first coordinate should be F: 23, 677, 4.
	x_coord = [23, 53, 2, -12, 95, 103, 14, -5]
	y_coord = [677, 233, 405, 433, 905, 376, 432, 445]
	z_coord = [4, 16, -6, -42, 3, -6, 23, -1]
	labels = ["F", "J", "A", "Q", "Y", "B", "W", "X"]

	points = []
	for point in zip(labels, x_coord, y_coord, z_coord):
		points.append("{}: {}, {}, {}".format(*point))

	for point in points:
		print(point)
	Output:
		F: 23, 677, 4
		J: 53, 233, 16
		A: 2, 405, -6
		Q: -12, 433, -42
		Y: 95, 905, 3
		B: 103, 376, -6
		W: 14, 432, 23
		X: -5, 445, -1
	Notice here, the tuple was unpacked using * in the format method. This can help make your code cleaner!

Quiz Solution: Zip Lists to a Dictionary
Use zip to create a dictionary cast that uses names as keys and heights as values.
	cast_names = ["Barney", "Robin", "Ted", "Lily", "Marshall"]
	cast_heights = [72, 68, 72, 66, 76]

	cast = dict(zip(cast_names, cast_heights))
	print(cast)
	Output:
		The order of elements in this output may vary since dictionaries are unordered.

		{'Lily': 66, 'Barney': 72, 'Marshall': 76, 'Ted': 72, 'Robin': 68}

Quiz Solution: Unzip Tuples
Unzip the cast tuple into two names and heights tuples.
	cast = (("Barney", 72), ("Robin", 68), ("Ted", 72), ("Lily", 66), ("Marshall", 76))

	names, heights = zip(*cast)
	print(names)
	print(heights)
	Output:
		('Barney', 'Robin', 'Ted', 'Lily', 'Marshall')
		(72, 68, 72, 66, 76)
		
Quiz Solution: Transpose with Zip
Use zip to transpose data from a 4-by-3 matrix to a 3-by-4 matrix. There's actually a cool trick for this! Feel free to look at the solutions if you can't figure it out.	
	data = ((0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11))

	data_transpose = tuple(zip(*data))
	print(data_transpose)
	Output:
		((0, 3, 6, 9), (1, 4, 7, 10), (2, 5, 8, 11))
		This is a useful trick to know!

Quiz Solution: Enumerate
Use enumerate to modify the cast list so that each element contains the name followed by the character's corresponding height. For example, the first element of cast should change from "Barney Stinson" to "Barney Stinson 72".
	cast = ["Barney Stinson", "Robin Scherbatsky", "Ted Mosby", "Lily Aldrin", "Marshall Eriksen"]
	heights = [72, 68, 72, 66, 76]

	for i, character in enumerate(cast):
		cast[i] = character + " " + str(heights[i])

	print(cast)
	Output:
		['Barney Stinson 72', 'Robin Scherbatsky 68', 'Ted Mosby 72', 'Lily Aldrin 66', 'Marshall Eriksen 76']

		
Quiz Solution: Extract First Names
Use a list comprehension to create a new list first_names containing just the first names in names in lowercase.
	names = ["Rick Sanchez", "Morty Smith", "Summer Smith", "Jerry Smith", "Beth Smith"]
	first_names = [name.split()[0].lower() for name in names]
	print(first_names)
	Output:
		['rick', 'morty', 'summer', 'jerry', 'beth']

Quiz Solution: Multiples of Three
Use a list comprehension to create a list multiples_3 containing the first 20 multiples of 3.
	multiples_3 = [x * 3 for x in range(1, 21)]
	print(multiples_3)
	Output:
		[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]

Quiz Solution: Filter Names by Scores
Use a list comprehension to create a list of names passed that only include those that scored at least 65.
	scores = {
				 "Rick Sanchez": 70,
				 "Morty Smith": 35,
				 "Summer Smith": 82,
				 "Jerry Smith": 23,
				 "Beth Smith": 98
			  }

	passed = [name for name, score in scores.items() if score >= 65]
	print(passed)
	Output:
		The order of elements in this output may vary since dictionaries are unordered.
		['Beth Smith', 'Summer Smith', 'Rick Sanchez']
		
		
LESSON 26 : FUNCTIONS

Quiz Solution: Population Density Function
Write a function named population_density that takes two arguments, population and land_area, and returns a population density calculated from those values. I've included two test cases that you can use to verify that your function works correctly. Once you've written your function, use the Test Run button to test your code.
	def population_density(population, land_area):
		return population/land_area

	# test cases for your function
	test1 = population_density(10, 1)
	expected_result1 = 10
	print("expected result: {}, actual result: {}".format(expected_result1, test1))

	test2 = population_density(864816, 121.4)
	expected_result2 = 7123.6902801
	print("expected result: {}, actual result: {}".format(expected_result2, test2))
	Output:
		expected result: 10, actual result: 10.0
		expected result: 7123.6902801, actual result: 7123.690280065897
	

Quiz Solution: readable_timedelta
Write a function named readable_timedelta. The function should take one argument, an integer days, and return a string that says how many weeks and days that is. 
	def readable_timedelta(days):
		# use integer division to get the number of weeks
		weeks = days // 7
		# use % to get the number of days that remain
		remainder = days % 7
		return "{} week(s) and {} day(s).".format(weeks, remainder)

	# test your function
	print(readable_timedelta(10))
	Output:
		1 week(s) and 3 day(s).
Nice work on writing your first functions! You'll see and write more functions soon.


Quiz Solution: Variable Scope
A better way to write this would be:
	egg_count = 0

	def buy_eggs(count):
		return count + 12  # purchase a dozen eggs

	egg_count = buy_eggs(egg_count)
Compare this with the original code snippet:
	egg_count = 0

	def buy_eggs():
		egg_count += 12 # purchase a dozen eggs

	buy_eggs()
This second code snippet causes an UnboundLocalError.

Quiz Solution: readable_timedelta
	def readable_timedelta(days):
		"""
		Return a string of the number of weeks and days included in days.

		Parameters:
		days -- number of days to convert (int)

		Returns:
		string of the number of weeks and days included in days
		"""
		weeks = days // 7
		remainder = days % 7
		return "{} week(s) and {} day(s)".format(weeks, remainder)

Quiz: Lambda with Map
map() is a higher-order built-in function that takes a function and iterable as inputs, and returns an iterator that applies the function to each element of the iterable. The code below uses map() to find the mean of each list in numbers to create the list averages. Test run it to see what happens.

Rewrite this code to be more concise by replacing the mean function with a lambda expression defined within the call to map().
	numbers = [
				  [34, 63, 88, 71, 29],
				  [90, 78, 51, 27, 45],
				  [63, 37, 85, 46, 22],
				  [51, 22, 34, 11, 18]
			   ]
	#orginal
	def mean(num_list):
		return sum(num_list) / len(num_list)

	averages = list(map(mean, numbers))
	print(averages)

	#new
	averages = list(map(lambda mean : sum(mean) / len(mean), numbers))
	print(averages)
	
Quiz: Lambda with Filter
filter() is a higher-order built-in function that takes a function and iterable as inputs and returns an iterator with the elements from the iterable for which the function returns True. The code below uses filter() to get the names in cities that are fewer than 10 characters long to create the list short_cities. Give it a test run to see what happens.

Rewrite this code to be more concise by replacing the is_short function with a lambda expression defined within the call to filter().
	cities = ["New York City", "Los Angeles", "Chicago", "Mountain View", "Denver", "Boston"]
	#orginal
	def is_short(name):
		return len(name) < 10

	short_cities = list(filter(is_short, cities))
	print(short_cities)
	#new
	short_cities = list(filter(lambda is_short : len(is_short) < 10, cities))
	print(short_cities)
	
	
Quiz: Implement my_enumerate
Write your own generator function that works like the built-in function enumerate.

Calling the function like this:
	lessons = ["Why Python Programming", "Data Types and Operators", "Control Flow", "Functions", "Scripting"]

	for i, lesson in my_enumerate(lessons, 1):
		print("Lesson {}: {}".format(i, lesson))
	should output:
		Lesson 1: Why Python Programming
		Lesson 2: Data Types and Operators
		Lesson 3: Control Flow
		Lesson 4: Functions
		Lesson 5: Scripting
		
	lessons = ["Why Python Programming", "Data Types and Operators", "Control Flow", "Functions", "Scripting"]

	def my_enumerate(iterable, start=0):
		# Implement your generator function here
		count = start
		for element in iterable:
			yield count, element
			count += 1

	for i, lesson in my_enumerate(lessons, 1):
		print("Lesson {}: {}".format(i, lesson))
		
		
Quiz: Chunker
	If you have an iterable that is too large to fit in memory in full (e.g., when dealing with large files), being able to take and use chunks of it at a time can be very valuable.

	Implement a generator function, chunker, that takes in an iterable and yields a chunk of a specified size at a time.

	Calling the function like this:
		for chunk in chunker(range(25), 4):
			print(list(chunk))
		should output:
			[0, 1, 2, 3]
			[4, 5, 6, 7]
			[8, 9, 10, 11]
			[12, 13, 14, 15]
			[16, 17, 18, 19]
			[20, 21, 22, 23]
			[24]
			
	def chunker(iterable, size):
		"""Yield successive chunks from iterable of length size."""
		for i in range(0, len(iterable), size):
			yield iterable[i:i + size]

	for chunk in chunker(range(25), 4):
		print(list(chunk))
